<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="core_atom.php" hash="44e85dd7e4cefbb3c878217954a2fbaa" package="Default">
    <function namespace="global" line="90" package="Default">
      <name>generateFeed</name>
      <full_name>\generateFeed</full_name>
      <docblock line="83">
        <description>Generates an atom feed and returns it</description>
        <long-description></long-description>
        <tag line="83" name="param" description="unused" type="\-" variable="">
          <type by_reference="false">\-</type>
        </tag>
        <tag line="83" name="return" description="(atom_feed): an instance of the atom_feed class" type="\$atom">
          <type by_reference="false">\$atom</type>
        </tag>
      </docblock>
    </function>
    <class final="false" abstract="false" namespace="global" line="18" package="Default">
      <extends/>
      <name>atom_feed</name>
      <full_name>\atom_feed</full_name>
      <docblock line="14">
        <description>Defines a data object to contain an atom feed as items
are added and the feed is updated then returned</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="20" namespace="global" package="Default">
        <name>$title</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="20" namespace="global" package="Default">
        <name>$link</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="20" namespace="global" package="Default">
        <name>$description</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="20" namespace="global" package="Default">
        <name>$feedstamp</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="20" namespace="global" package="Default">
        <name>$author</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="22">
          <description>Creates an empty atom feed object with metadata</description>
          <long-description></long-description>
          <tag line="22" name="param" description="(str): a title for the atom feed" type="\" variable="$title"/>
          <tag line="22" name="param" description="(str): the base url for the feed" type="\" variable="$link"/>
          <tag line="22" name="param" description="(str): a description or summary of the feed" type="\" variable="$description"/>
          <tag line="22" name="param" description="(str): a datestamp for the feed, in standard atom format" type="\" variable="$feedstamp"/>
        </docblock>
        <argument line="30">
          <name>$title</name>
          <default></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$link</name>
          <default></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$description</name>
          <default></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$feedstamp</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Default">
        <name>new_item</name>
        <full_name>new_item</full_name>
        <docblock line="41">
          <description>Adds an item to the feed as an object in the object's
items array</description>
          <long-description></long-description>
          <tag line="41" name="param" description="a fully initialized instance of the postObj&#10;class." type="\" variable="$postObject:"/>
        </docblock>
        <argument line="49">
          <name>$postObject</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>output</name>
        <full_name>output</full_name>
        <docblock line="54">
          <description>Returns a displayable representation of the feed
with appropriate code added.</description>
          <long-description>&lt;p&gt;Relies on the postObj
atom_output() function to generate code for individidual
feed items.&lt;/p&gt;</long-description>
          <tag line="54" name="param" description="unused" type="\-" variable="">
            <type by_reference="false">\-</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file core_atom.php</error>
      <notice line="83" code="50013">Parameter  could not be found in \generateFeed()</notice>
      <error line="20" code="50018">No DocBlock was found for property $title</error>
      <error line="20" code="50018">No DocBlock was found for property $link</error>
      <error line="20" code="50018">No DocBlock was found for property $description</error>
      <error line="20" code="50018">No DocBlock was found for property $feedstamp</error>
      <error line="20" code="50018">No DocBlock was found for property $author</error>
      <error line="41" code="50014">Name of argument $postObject does not match with the DocBlock's name $postObject: in new_item()</error>
      <notice line="41" code="50013">Parameter $postObject: could not be found in new_item()</notice>
      <notice line="54" code="50013">Parameter  could not be found in output()</notice>
    </parse_markers>
  </file>
  <file path="core_blog.php" hash="ae90ec397cf83fde4af9da2ebcfb3bb0" package="Default">
    <include line="12" type="Include" package="Default">
      <name>core_web.php</name>
    </include>
    <function namespace="global" line="158" package="Default">
      <name>getPostList</name>
      <full_name>\getPostList</full_name>
      <docblock line="153">
        <description>Creates a list of files in the working directory, sorts
and reverses the list, and returns it.</description>
        <long-description>&lt;p&gt;Intended for working
with blog posts stored as text files with date-coded filenames&lt;/p&gt;</long-description>
      </docblock>
    </function>
    <function namespace="global" line="195" package="Default">
      <name>checkInventory</name>
      <full_name>\checkInventory</full_name>
      <docblock line="190">
        <description>Checks the number of files in the current directory and
compares it to how many are listed in the current inventory.</description>
        <long-description>&lt;p&gt;If the number doesn't match, it returns False.&lt;/p&gt;</long-description>
      </docblock>
    </function>
    <function namespace="global" line="217" package="Default">
      <name>regenInventory</name>
      <full_name>\regenInventory</full_name>
      <docblock line="214">
        <description>Regenerates the blog inventory file</description>
        <long-description></long-description>
      </docblock>
    </function>
    <function namespace="global" line="244" package="Default">
      <name>RandomLine</name>
      <full_name>\RandomLine</full_name>
      <docblock line="239">
        <description>Returns a random line of a given file.</description>
        <long-description>&lt;p&gt;Used mainly for generating random suggestions
for additional blog posts to read.&lt;/p&gt;</long-description>
      </docblock>
      <argument line="244">
        <name>$filename</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="259" package="Default">
      <name>getSuggestions</name>
      <full_name>\getSuggestions</full_name>
      <docblock line="250">
        <description>Generates and displays a list of additional 'suggested' blog
posts.</description>
        <long-description>&lt;p&gt;Right now picks them randomly, but in the future might
rely on a better algorithm.&lt;/p&gt;

&lt;p&gt;Arguments:
 $number (int): how many to generate and display
 $tag (string): a tag or tags to use for generating suggestions&lt;/p&gt;</long-description>
      </docblock>
      <argument line="259">
        <name>$number</name>
        <default></default>
        <type/>
      </argument>
      <argument line="259">
        <name>$tag</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="279" package="Default">
      <name>getPosts</name>
      <full_name>\getPosts</full_name>
      <docblock line="269">
        <description>Lists the files in a directory and returns an array of them
out to the given length section</description>
        <long-description></long-description>
        <tag line="269" name="param" description="(int) - a starting index for the files" type="\global\" variable="$start"/>
        <tag line="269" name="param" description="(int) - an ending index for the files" type="\global\" variable="$end"/>
        <tag line="269" name="return" description="(array) - an array of post objects" type="\$posts">
          <type by_reference="false">\$posts</type>
        </tag>
      </docblock>
      <argument line="279">
        <name>$start</name>
        <default></default>
        <type/>
      </argument>
      <argument line="279">
        <name>$end</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="global" line="24" package="Default">
      <extends/>
      <name>postObj</name>
      <full_name>\postObj</full_name>
      <docblock line="14">
        <description>Contains everything to do with retrieving and outputting
posts in multiple forms.</description>
        <long-description>&lt;p&gt;Is capable of retrieving posts stored
in .json format (preferred when available) as well as plaintext
(file syntax described below in constructor).&lt;/p&gt;

&lt;p&gt;Contains functions to output the post data in html format
for displaying to a page, and atom format for use in generating
an atom feed.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$title</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$tags</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$date</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$datestamp</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$content</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$link</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="28">
          <description>Reads and parses a post file and creates an instance
of the class with the post data.</description>
          <long-description>&lt;p&gt;Capable of managing
posts in json and plaintext, but prefers json if
a json file exists for the requested post.&lt;/p&gt;</long-description>
          <tag line="28" name="param" description="(string) - a yyyy.mm.dd string of a nodefile" type="\nodefile" variable="$nodefile">
            <type by_reference="false">\nodefile</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$nodefile</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="105" package="Default">
        <name>atom_output</name>
        <full_name>atom_output</full_name>
        <docblock line="101">
          <description>Produces the coded output of the item that can be
returned and displayed or saved in an atom feed</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Default">
        <name>page_output</name>
        <full_name>page_output</full_name>
        <docblock line="117">
          <description>Produces the coded output of the item that can be displayed
on an html page</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Default">
        <name>list_item_output</name>
        <full_name>list_item_output</full_name>
        <docblock line="132">
          <description>Returns a string containing the post title
and tags, suitable for outputting in an atom feed (maybe)
or an html list</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="143">
          <description>Retrieves and returns the requested field</description>
          <long-description></long-description>
          <tag line="143" name="param" description="(str) - the name of the field to return" type="\" variable="$field"/>
        </docblock>
        <argument line="148">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file core_blog.php</error>
      <error line="239" code="50015">Argument $filename is missing from the Docblock of \RandomLine()</error>
      <error line="250" code="50015">Argument $number is missing from the Docblock of \getSuggestions()</error>
      <error line="250" code="50015">Argument $tag is missing from the Docblock of \getSuggestions()</error>
      <error line="26" code="50018">No DocBlock was found for property $title</error>
      <error line="26" code="50018">No DocBlock was found for property $tags</error>
      <error line="26" code="50018">No DocBlock was found for property $date</error>
      <error line="26" code="50018">No DocBlock was found for property $datestamp</error>
      <error line="26" code="50018">No DocBlock was found for property $content</error>
      <error line="26" code="50018">No DocBlock was found for property $link</error>
    </parse_markers>
  </file>
  <file path="core_config.php" hash="f7c5c088728f641f4ad3f7b77d6f3a39" package="Default">
    <class final="false" abstract="false" namespace="global" line="17" package="Default">
      <extends/>
      <name>config</name>
      <full_name>\config</full_name>
      <docblock line="12">
        <description>Defines a class to hold variables for configuration
options.</description>
        <long-description>&lt;p&gt;All variables are accessible only internally
to keep things fairly clean.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="true" visibility="private" line="19" namespace="global" package="Default">
        <name>$webcore_root</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="20" namespace="global" package="Default">
        <name>$dynamic_directory</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="21" namespace="global" package="Default">
        <name>$auto_feed_regen</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="22" namespace="global" package="Default">
        <name>$auto_file_regen</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="23" namespace="global" package="Default">
        <name>$save_dynamics</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="24" namespace="global" package="Default">
        <name>$post_directory</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="25" namespace="global" package="Default">
        <name>$default_visitor_name</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="26" namespace="global" package="Default">
        <name>$hidden_files</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="27" namespace="global" package="Default">
        <name>$posts_per_page</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="28" namespace="global" package="Default">
        <name>$site_domain</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="29" namespace="global" package="Default">
        <name>$site_author</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="30" namespace="global" package="Default">
        <name>$tracking_code</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="33" namespace="global" package="Default">
        <name>$name</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="34" namespace="global" package="Default">
        <name>$id</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="35" namespace="global" package="Default">
        <name>$konami</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="36" namespace="global" package="Default">
        <name>$node</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="37" namespace="global" package="Default">
        <name>$track</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="38" namespace="global" package="Default">
        <name>$start</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="39" namespace="global" package="Default">
        <name>$end</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="41">
          <description>Sets the configuration options en-masse.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="144">
          <description>Returns the value of the requested config key</description>
          <long-description></long-description>
          <tag line="144" name="param" description="- the name of the key" type="\" variable="$setting"/>
          <tag line="144" name="return" description="the value the key is associated with" type="\-">
            <type by_reference="false">\-</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$setting</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file core_config.php</error>
      <error line="19" code="50018">No DocBlock was found for property $webcore_root</error>
      <error line="20" code="50018">No DocBlock was found for property $dynamic_directory</error>
      <error line="21" code="50018">No DocBlock was found for property $auto_feed_regen</error>
      <error line="22" code="50018">No DocBlock was found for property $auto_file_regen</error>
      <error line="23" code="50018">No DocBlock was found for property $save_dynamics</error>
      <error line="24" code="50018">No DocBlock was found for property $post_directory</error>
      <error line="25" code="50018">No DocBlock was found for property $default_visitor_name</error>
      <error line="26" code="50018">No DocBlock was found for property $hidden_files</error>
      <error line="27" code="50018">No DocBlock was found for property $posts_per_page</error>
      <error line="28" code="50018">No DocBlock was found for property $site_domain</error>
      <error line="29" code="50018">No DocBlock was found for property $site_author</error>
      <error line="30" code="50018">No DocBlock was found for property $tracking_code</error>
      <error line="33" code="50018">No DocBlock was found for property $name</error>
      <error line="34" code="50018">No DocBlock was found for property $id</error>
      <error line="35" code="50018">No DocBlock was found for property $konami</error>
      <error line="36" code="50018">No DocBlock was found for property $node</error>
      <error line="37" code="50018">No DocBlock was found for property $track</error>
      <error line="38" code="50018">No DocBlock was found for property $start</error>
      <error line="39" code="50018">No DocBlock was found for property $end</error>
    </parse_markers>
  </file>
  <file path="core_rss.php" hash="666c98fed9d86bc05949afdd8967916f" package="Default"/>
  <file path="core_sitemap.php" hash="15bb7cf920ec0e2553aafe4c9f3f6dc0" package="Default">
    <function namespace="global" line="105" package="Default">
      <name>createSitemap</name>
      <full_name>\createSitemap</full_name>
      <docblock line="95">
        <description>Generates a sitemap given a list of local and web paths
which correspond to each other</description>
        <long-description></long-description>
        <tag line="95" name="param" description="(list): a list of local paths to search for files in" type="\global\" variable="$localpath"/>
        <tag line="95" name="param" description="(list): a list of web addresses, which correspond to the localpaths" type="\global\" variable="$webpath"/>
        <tag line="95" name="param" description="(list): a list of file prefixes to search for in the dir" type="\global\" variable="$delimeters"/>
        <tag line="95" name="return" description="(sitemap): an xml sitemap" type="\$sitemap">
          <type by_reference="false">\$sitemap</type>
        </tag>
      </docblock>
      <argument line="105">
        <name>$localpath</name>
        <default></default>
        <type/>
      </argument>
      <argument line="105">
        <name>$webpath</name>
        <default></default>
        <type/>
      </argument>
      <argument line="105">
        <name>$delimeters</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="global" line="15" package="Default">
      <extends/>
      <name>urlset</name>
      <full_name>\urlset</full_name>
      <docblock line="11">
        <description>Defines a data object to contain an atom feed as items
are added and the feed is updated then returned</description>
        <long-description></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="21" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="17">
          <description>Creates an empty sitemap class</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>new_item</name>
        <full_name>new_item</full_name>
        <docblock line="26">
          <description>Adds an item to the feed as an object in the object's
items array</description>
          <long-description></long-description>
          <tag line="26" name="param" description="(str): the web address of the item's source" type="\" variable="$loc"/>
          <tag line="26" name="param" description="(str): the modification date of the item" type="\" variable="$lastmod"/>
        </docblock>
        <argument line="33">
          <name>$loc</name>
          <default></default>
          <type/>
        </argument>
        <argument line="33">
          <name>$lastmod</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>output</name>
        <full_name>output</full_name>
        <docblock line="38">
          <description>Returns a displayable representation of the sitemap
with appropriate code added.</description>
          <long-description></long-description>
          <tag line="38" name="return" description="(string) - an xml encoded output of the class" type="\$r">
            <type by_reference="false">\$r</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="61" package="Default">
      <extends/>
      <name>url</name>
      <full_name>\url</full_name>
      <docblock line="58">
        <description>Creates a class to contain an item in the sitemap</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="63" namespace="global" package="Default">
        <name>$loc</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="63" namespace="global" package="Default">
        <name>$lastmod</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="65">
          <description>Creates the data object to contain the atom feed item.</description>
          <long-description></long-description>
          <tag line="65" name="param" description="(str): the web address of the item source" type="\" variable="$link"/>
          <tag line="65" name="param" description="(str): the item modification date" type="\" variable="$lastmod"/>
        </docblock>
        <argument line="71">
          <name>$loc</name>
          <default></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$lastmod</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>output</name>
        <full_name>output</full_name>
        <docblock line="78">
          <description>Produces the coded output of the item that can be
returned and displayed or saved</description>
          <long-description></long-description>
          <tag line="78" name="return" description="- an xml-encoded representation of the item" type="\$item">
            <type by_reference="false">\$item</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file core_sitemap.php</error>
      <error line="63" code="50018">No DocBlock was found for property $loc</error>
      <error line="63" code="50018">No DocBlock was found for property $lastmod</error>
      <error line="65" code="50014">Name of argument $loc does not match with the DocBlock's name $link in __construct()</error>
      <notice line="65" code="50013">Parameter $link could not be found in __construct()</notice>
    </parse_markers>
  </file>
  <file path="core_web.php" hash="5e5e641deff60a7464c23d18e7bdbc2e" package="Default">
    <include line="13" type="Include" package="Default">
      <name>core_config.php</name>
    </include>
    <function namespace="global" line="209" package="Default">
      <name>chooseInclude</name>
      <full_name>\chooseInclude</full_name>
      <docblock line="198">
        <description>Checks to see if the preferred file exists, and if it does
returns it, otherwise it returns the secondary file, which ideally
should be a file (like an error page) that is guaranteed to exist.</description>
        <long-description></long-description>
        <tag line="198" name="param" description="(string): the preferred page to include" type="\global\" variable="$preferred"/>
        <tag line="198" name="param" description="(string): the secondary, emergency page to include" type="\global\" variable="$secondary"/>
        <tag line="198" name="return" description="(string): the page that should be included" type="\$page">
          <type by_reference="false">\$page</type>
        </tag>
      </docblock>
      <argument line="209">
        <name>$preferred</name>
        <default></default>
        <type/>
      </argument>
      <argument line="209">
        <name>$secondary</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="227" package="Default">
      <name>randomGreeting</name>
      <full_name>\randomGreeting</full_name>
      <docblock line="219">
        <description>Displays a string with a random greeting and the string
the function was called with.</description>
        <long-description></long-description>
        <tag line="219" name="param" description="(str): a string, preferably a name" type="\global\" variable="$first_name"/>
        <tag line="219" name="return" description="a string with a personal greeting" type="\-">
          <type by_reference="false">\-</type>
        </tag>
      </docblock>
      <argument line="227">
        <name>$first_name</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="244" package="Default">
      <name>getConfigOption</name>
      <full_name>\getConfigOption</full_name>
      <docblock line="234">
        <description>Built to abstract retrieving config variables, since
they're now contained in a class this is just for legacy
support until everything else gets moved off
of using this function</description>
        <long-description></long-description>
        <tag line="234" name="param" description="- the name of a config key to retrieve" type="\global\" variable="$key"/>
        <tag line="234" name="return" description="the value of the config key" type="\-">
          <type by_reference="false">\-</type>
        </tag>
      </docblock>
      <argument line="244">
        <name>$key</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="global" line="21" package="Default">
      <extends/>
      <name>session</name>
      <full_name>\session</full_name>
      <docblock line="15">
        <description>Provides a common interface for picking up variables from the
user in a clean way, so that internal variables for pulling
pages and otherwise can be managed more easily and sanitation
settings are more easily applied site-wide.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$request</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$varDefs</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description>Iterates through all the variables requested in $request
and sets them to their defaults or from the URL/cookie.</description>
          <long-description></long-description>
          <tag line="25" name="param" description="(array) - a list of variables to retrieve" type="\" variable="$request"/>
        </docblock>
        <argument line="32">
          <name>$request</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="54" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="46">
          <description>Retrieves a value from the associative array.</description>
          <long-description></long-description>
          <tag line="46" name="param" description="(str) - the name of a variable to retrieve" type="\" variable="$field"/>
          <tag line="46" name="return" description="- the value of the variable or '' if nonexistant" type="\(str)">
            <type by_reference="false">\(str)</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="68" package="Default">
        <name>checkCookie</name>
        <full_name>checkCookie</full_name>
        <docblock line="59">
          <description>Checks the cookie with the given name and returns its contents,
or a default value if the cookie is empty/doesn't exist</description>
          <long-description></long-description>
          <tag line="59" name="param" description="(string) - the name of the cookie to check" type="\" variable="$name"/>
          <tag line="59" name="param" description="(string) - string to return if the cookie is bad" type="\" variable="$emptyValue"/>
          <tag line="59" name="return" description="(string)- the contents of the cookie or default value" type="\$contents">
            <type by_reference="false">\$contents</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$emptyValue</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="89" package="Default">
        <name>setVarFromURL</name>
        <full_name>setVarFromURL</full_name>
        <docblock line="75">
          <description>Sets a variable from the URL by running the URL input through
safeChars to make it html-safe and the right size, then
looking for a cookie if the variable has not been set, and
sets the variable to a default value if it has not been defined
in the url or a cookie.</description>
          <long-description></long-description>
          <tag line="75" name="param" description="(string): the name of the variable to get/set" type="\" variable="$name"/>
          <tag line="75" name="param" description="(string): a default value for the variable if no&#10;other value can be found" type="\" variable="$emptyValue"/>
          <tag line="75" name="param" description="(int): a maximum length for the variable if pulled from URL" type="\" variable="$length"/>
          <tag line="75" name="return" description="the default value or the value pulled from a cookie or URL" type="\(string):">
            <type by_reference="false">\(string):</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="89">
          <name>$emptyValue</name>
          <default></default>
          <type/>
        </argument>
        <argument line="89">
          <name>$length</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="105" package="Default">
        <name>setIfEmpty</name>
        <full_name>setIfEmpty</full_name>
        <docblock line="95">
          <description>Checks if a given string is empty and returns the value to set
it as if it is.</description>
          <long-description>&lt;p&gt;if not, returns the string.&lt;/p&gt;</long-description>
          <tag line="95" name="param" description="(string): string value to check" type="\" variable="$string"/>
          <tag line="95" name="param" description="(string): Value to return if the string is empty" type="\" variable="$emptyValue"/>
          <tag line="95" name="return" description="or $emptyValue (string): $string if the string is not empty&#10;&#9;or $emptyValue if the string is empty" type="\$string">
            <type by_reference="false">\$string</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
        <argument line="105">
          <name>$emptyValue</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="125" package="Default">
      <extends/>
      <name>sanitation</name>
      <full_name>\sanitation</full_name>
      <docblock line="116">
        <description>Manages sanitizing user input.</description>
        <long-description>&lt;p&gt;Currently works only for strings,
but adding functions to sanitize other data types is trivial.
Retrieving sanitized values from the class involves invoking
the __get function with the type, str, arr, bool, etc for whichever
sanitation functions are implemented. The sanitization for the
requested return is called (returns an empty object if the
sanitization can't convert the current one to the requested one).&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="127" namespace="global" package="Default">
        <name>$dirty</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="127" namespace="global" package="Default">
        <name>$length</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="127" namespace="global" package="Default">
        <name>$type</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="129">
          <description>Constructs an instance of the class
containing the original variable and the sanitized
variable</description>
          <long-description></long-description>
          <tag line="129" name="param" description="(str) - the raw variable contents" type="\" variable="$rawVar"/>
          <tag line="129" name="param" description="(str) - the desired type for the variable to be" type="\" variable="$type"/>
          <tag line="129" name="param" description="(int) - a maximum length for the variable" type="\" variable="$length"/>
        </docblock>
        <argument line="139">
          <name>$rawVar</name>
          <default></default>
          <type/>
        </argument>
        <argument line="139">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="139">
          <name>$length</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="158" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="147">
          <description>Returns a sanitized version of the variable.</description>
          <long-description>&lt;p&gt;If the requested
type is not the same as the actual type, the class will
attempt to convert it to the type if possible. Note that
list cannot become a string.&lt;/p&gt;</long-description>
          <tag line="147" name="param" description="the type of data to return (str, bool, arr, etc)" type="\" variable="$type:"/>
          <tag line="147" name="return" description="a sanitized string" type="\-">
            <type by_reference="false">\-</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="173" package="Default">
        <name>str</name>
        <full_name>str</full_name>
        <docblock line="163">
          <description>Verify that a string is made of html-safe characters and
short enough to fit where it belongs.</description>
          <long-description>&lt;p&gt;Basically some simple
input sanitizing for nonsecure things.&lt;/p&gt;</long-description>
          <tag line="163" name="param" description="(string): a string or something else" type="\" variable="$string"/>
          <tag line="163" name="param" description="(integer): an integer value for the length limit of the string" type="\" variable="$length"/>
          <tag line="163" name="return" description="(string): a html-safe and proper length string" type="\$safestring">
            <type by_reference="false">\$safestring</type>
          </tag>
        </docblock>
        <argument line="173">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
        <argument line="173">
          <name>$length</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file core_web.php</error>
      <error line="23" code="50018">No DocBlock was found for property $request</error>
      <error line="23" code="50018">No DocBlock was found for property $varDefs</error>
      <error line="127" code="50018">No DocBlock was found for property $dirty</error>
      <error line="127" code="50018">No DocBlock was found for property $length</error>
      <error line="127" code="50018">No DocBlock was found for property $type</error>
      <error line="147" code="50014">Name of argument $type does not match with the DocBlock's name $type: in __get()</error>
      <notice line="147" code="50013">Parameter $type: could not be found in __get()</notice>
    </parse_markers>
  </file>
  <file path="template_blognav.php" hash="d2ad89fa2f253398c687485205cbf02a" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file template_blognav.php</error>
    </parse_markers>
  </file>
  <file path="template_error.php" hash="18274c9babb90251f1b6d23ba9176a05" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file template_error.php</error>
    </parse_markers>
  </file>
  <file path="template_footer.php" hash="b383daa2b9df6c761d50d085cc5f53dd" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file template_footer.php</error>
    </parse_markers>
  </file>
  <file path="template_header.php" hash="4982f80f487b262e2eaa26b37596a482" package="Default">
    <include line="5" type="Include" package="Default">
      <name>template_introduction.php</name>
    </include>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file template_header.php</error>
    </parse_markers>
  </file>
  <file path="template_introduction.php" hash="f693b87309d8376388fea617f5508119" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file template_introduction.php</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <namespace name="global" full_name="global"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
