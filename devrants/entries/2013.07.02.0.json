{"content":"<p>As I've made tracking my time and code part of my workflow, using the software is basically an automatic thing that I don't do with a lot of thought. As much as I've tried to build a fairly decent GUI, I've caught myself pulling down a menu looking for a feature or trying to do something that the GUI doesn't actually support [yet]. \"Why isn't this here?\" and \"Why doesn't it do that?\" started happening as I went through it as using it became an automatic thing. This has helped to push the front end of the application from the rudimentary mess of buttons from throwing it together while I learned TKinter to something much more usable.<\/p>\r\n\r\n<p>So, how as this evolved the project tracker and given me insight into development? Well, the project tracker was born of something that I hoped to use, then became something I did use and features were added, and I continue to refine it. Basically, the very application I'm tracking my projects with is a project itself. When I first built the tracker, it had a very rudimentary command-line interface with a number of commands. I soon realized that although I am very shell-oriented, a GUI would make the program much more valuable to me, so there was the additional of a rudimentary GUI as I felt my way through learning another GUI system (TKinter, rather than Java's Swing).<\/p>\r\n\r\n<p>After the program had a GUI, it became an actual application that I was using much more frequently. I added more features as I felt I wanted them and it grew from there. Now, it still wasn't refined by any means but as I used it more, I began to fall into the position that I mentioned before. \"Why isn't this here?\", \"Why doesn't it do that?\" followed by \"Oh wait, I'm the one who's supposed to add it\" started happening. I added the ability to edit a project's data and add logs from the project view window. I integrated the histograms of time spent into the main application window so they would function as interactively as the list of projects. Little things here and there that made the user - my - experience better. At some point, I may not be the only user if I end up publishing the application, so it could be other users' experience as well.<\/p>\r\n\r\n<p>The real kicker here is the side effects. Not only has it helped to hone my development and design skills somewhat, but it has actually cut out chunks of source code and made the code less complex. For example, by eliminating a separate (non-interactive) window for showing a histogram of time spent on projects I cut out about 50 lines of code, while gaining some nice improvements in the usefulness of the histogram views. It also kicked off a process for making GUI elements communicate with each other better in comparison to what I had built while fumbling around in a GUI system I didn't know at all. Better code, better features, win-win on both sides of involvement with the application.<\/p>","title":"Better Features, Better Code","date":null,"tags":"development, projects","datestamp":"2013-07-02T21:01:38-05:00","updated":"2013-07-02T21:01:38-05:00"}