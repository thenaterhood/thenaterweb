{"content":"<p>Finally, <em>finally<\/em> managed to squash a bug in Gnat that has existed for much longer than I would like to admit. There is nothing quite like the satisfaction that comes from getting rid of a bug that you've been coding around for a while, especially when it's one that should (in theory) be fairly simple to fix.<\/p>\r\n\r\n<p>The issue existed in both the blog feed system and the blog indexing system (which allows me to make those nifty pages with lists of tags and titles). Essentially, I couldn't update them once they were generated because they didn't properly pick up on what posts were added and what posts were removed. It was frustrating, and for The Philosophy of Nate, which I publicise much more than this one, I simply had FeedBurner use the regeneration URL when it pulled the feed which allowed me to avoid the issue for a while. This isn't actually an acceptable fix, however as large numbers of posts would cause the feed to be incredibly slow to the point where it could even time out.<\/p>\r\n\r\n<p>In the process of fixing one of these, I realized that the blog feed and the indexing were replicating a lot of each other's functionality, hence the same bug existing in both. Additionally, storing a cache of the feed had gotten overly complex as the class for the feed was not originally designed to be capable of doing that. It was a horrendously messy json file that had taken some guess and check to get reading it in working correctly (PHP did some funky things with it because of the layout). The index was much cleaner and simpler because it had been designed around the storage system. I had replicated my code between the classes, one fairly cleanly and the other horrifically. Even a number of the functions had the same name, but when building for two (originally) different purposes, it seemed reasonable. Turns out that it wasn't.<\/p>\r\n\r\n<p>As is generally pretty well known, code duplication is awful because you end up needing to fix the same bug in multiple places, as well as leading yourself into interesting and unfortunate messes. So, I pulled the code from the index class and made another class around it that the two other classes could inherit. I then gutted the code for both of them and fixed the bug in the new parent class. It didn't take too long, and it vastly improved the quality of the code while opening up a better and more uniform way for me to store data.<\/p>\r\n\r\n<p>The end result of the 2 hours I spent gutting my code left me satisfied. I now have two classes that work as intended, and a parent class that deals with all of the data storage and retrieval for them, which makes it nice if I decide to change my storage scheme. Additionally, with this new parent class for managing the data I can just extend the class to add new functionality - my site needs a search feature, doesn't it? Not bad for a night's work. There are a couple of quirks left that I need to tackle, but I'm satisfied with the results of tonight.<\/p>","title":"Bug Squashing","date":null,"tags":"development, projects, updates","datestamp":"2013-08-01T23:28:31-05:00","updated":"2013-08-01T23:28:31-05:00"}